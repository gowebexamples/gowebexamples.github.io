<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Web Examples</title>
    <link>https://gowebexamples.github.io/index.xml</link>
    <description>Recent content on Go Web Examples</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://gowebexamples.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello World</title>
      <link>https://gowebexamples.github.io/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/hello-world/</guid>
      <description>

&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;

&lt;p&gt;This example will show how to start a webserver on port 8080 and print the classic &amp;ldquo;hello world&amp;rdquo; message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// hello-world.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		fmt.Fprintln(w, &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;)
	})

	http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run hello-world.go

$ curl -s http://localhost:8080/
hello world
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Routes</title>
      <link>https://gowebexamples.github.io/routes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/routes/</guid>
      <description>

&lt;h2 id=&#34;routes&#34;&gt;Routes&lt;/h2&gt;

&lt;p&gt;This example will show how to register a route and get the data using just the &lt;code&gt;net/http&lt;/code&gt; package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// routes.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	userAges &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;:  &lt;span style=&#34;color: #009999&#34;&gt;25&lt;/span&gt;,
		&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;:    &lt;span style=&#34;color: #009999&#34;&gt;30&lt;/span&gt;,
		&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Claire&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #009999&#34;&gt;29&lt;/span&gt;,
	}

	http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/users/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		name &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; r.URL.Path[&lt;span style=&#34;color: #999999&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/users/&amp;quot;&lt;/span&gt;):]
		age &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; userAges[name]

		fmt.Fprintf(w, &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;%s is %d years old!&amp;quot;&lt;/span&gt;, name, age)
	})

	http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run routes.go

$ curl -s http://localhost:8080/users/Bob
Bob is &lt;span style=&#34;color: #009999&#34;&gt;30&lt;/span&gt; years old!
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Routes (using gorilla/mux)</title>
      <link>https://gowebexamples.github.io/routes-using-gorilla-mux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/routes-using-gorilla-mux/</guid>
      <description>

&lt;h2 id=&#34;routes-using-gorilla-mux&#34;&gt;Routes (using gorilla/mux)&lt;/h2&gt;

&lt;p&gt;This example will show how to register routes using the popular &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/gorilla/mux&#34;&gt;gorilla/mux&lt;/a&gt; router.
It is compatible with the router from the standard &lt;code&gt;net/http&lt;/code&gt; package but adds a few extra features like named url parameters and http method restrictions to remove some boilerplate code.&lt;/p&gt;

&lt;p&gt;To use the library we will have to install it first like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ go get github.com/gorilla/mux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From now on, every application we write will be able to make use of this library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// routes.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;

	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;github.com/gorilla/mux&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	userAges &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;:  &lt;span style=&#34;color: #009999&#34;&gt;25&lt;/span&gt;,
		&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;:    &lt;span style=&#34;color: #009999&#34;&gt;30&lt;/span&gt;,
		&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Claire&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #009999&#34;&gt;29&lt;/span&gt;,
	}

	r &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; mux.NewRouter()
	r.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/users/{name}&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		vars &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; mux.Vars(r)
		name &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; vars[&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;]
		age &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; userAges[name]

		fmt.Fprintf(w, &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;%s is %d years old!&amp;quot;&lt;/span&gt;, name, age)
	}).Methods(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;)

	http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, r)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run routes.go

$ curl -s http://localhost:8080/users/Bob
Bob is &lt;span style=&#34;color: #009999&#34;&gt;30&lt;/span&gt; years old!
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://gowebexamples.github.io/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/templates/</guid>
      <description>

&lt;h2 id=&#34;templates&#34;&gt;Templates&lt;/h2&gt;

&lt;p&gt;This example will show how to render a simple list of TODO items into an html page.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// todos.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;html/template&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;type&lt;/span&gt; Todo &lt;span style=&#34;font-weight: bold&#34;&gt;struct&lt;/span&gt; {
	Task &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;
	Done &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;bool&lt;/span&gt;
}

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	tmpl &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; template.Must(template.ParseFiles(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;todos.html&amp;quot;&lt;/span&gt;))
	todos &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; []Todo{
		{&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Learn Go&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;true&lt;/span&gt;},
		{&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Read Go Web Examples&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;true&lt;/span&gt;},
		{&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Create a web app in Go&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;false&lt;/span&gt;},
	}

	http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		tmpl.Execute(w, &lt;span style=&#34;font-weight: bold&#34;&gt;struct&lt;/span&gt;{ Todos []Todo }{todos})
	})

	http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;&amp;lt;!-- todos.html --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;h1&lt;/span&gt;&amp;gt;Todos&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;ul&lt;/span&gt;&amp;gt;
	{{range .Todos}}
		{{if .Done}}
			&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;s&lt;/span&gt;&amp;gt;{{.Task}}&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;s&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;li&lt;/span&gt;&amp;gt;
		{{else}}
			&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;li&lt;/span&gt;&amp;gt;{{.Task}}&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;li&lt;/span&gt;&amp;gt;
		{{end}}
	{{end}}
&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run todos.go
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;demo&#34;&gt;
    &lt;h1&gt;Todos&lt;/h1&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;s&gt;Learn Go&lt;/s&gt;&lt;/li&gt;
        &lt;li&gt;&lt;s&gt;Read Go Web Examples&lt;/s&gt;&lt;/li&gt;
        &lt;li&gt;Create a web app in Go&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://gowebexamples.github.io/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/forms/</guid>
      <description>

&lt;h2 id=&#34;forms&#34;&gt;Forms&lt;/h2&gt;

&lt;p&gt;This example will show how to simulate a contact form and parse the message into a struct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// forms.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;html/template&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;type&lt;/span&gt; ContactDetails &lt;span style=&#34;font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    Email   &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;
    Subject &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;
    Message &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
    tmpl &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; template.Must(template.ParseFiles(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;forms.html&amp;quot;&lt;/span&gt;))

    http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
        &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; r.Method &lt;span style=&#34;font-weight: bold&#34;&gt;!=&lt;/span&gt; http.MethodPost {
            tmpl.Execute(w, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
            &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt;
        }

        details &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; ContactDetails{
            Email:   r.FormValue(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;),
            Subject: r.FormValue(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;),
            Message: r.FormValue(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;),
        }

        &lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// do something with details&lt;/span&gt;
        _ = details

        tmpl.Execute(w, &lt;span style=&#34;font-weight: bold&#34;&gt;struct&lt;/span&gt;{ Success &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;bool&lt;/span&gt; }{&lt;span style=&#34;font-weight: bold&#34;&gt;true&lt;/span&gt;})
    })

    http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;&amp;lt;!-- forms.html --&amp;gt;&lt;/span&gt;
{{if .Success}}
    &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;h1&lt;/span&gt;&amp;gt;Thanks for your message!&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;h1&lt;/span&gt;&amp;gt;
{{else}}
    &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;h1&lt;/span&gt;&amp;gt;Contact&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;h1&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;label&lt;/span&gt;&amp;gt;Email:&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;br&lt;/span&gt; /&amp;gt;
        &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;br&lt;/span&gt; /&amp;gt;
        &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;label&lt;/span&gt;&amp;gt;Subject:&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;br&lt;/span&gt; /&amp;gt;
        &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;br&lt;/span&gt; /&amp;gt;
        &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;label&lt;/span&gt;&amp;gt;Message:&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;br&lt;/span&gt; /&amp;gt;
        &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;textarea&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;br&lt;/span&gt; /&amp;gt;
        &amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;form&lt;/span&gt;&amp;gt;
{{end}}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run forms.go
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;demo&#34;&gt;
    &lt;h1&gt;Contact&lt;/h1&gt;
    &lt;form method=&#34;POST&#34;&gt;
        &lt;label&gt;Email:&lt;/label&gt;&lt;br /&gt;
        &lt;input type=&#34;text&#34; name=&#34;email&#34;&gt;&lt;br /&gt;
        &lt;label&gt;Subject:&lt;/label&gt;&lt;br /&gt;
        &lt;input type=&#34;text&#34; name=&#34;subject&#34;&gt;&lt;br /&gt;
        &lt;label&gt;Message:&lt;/label&gt;&lt;br /&gt;
        &lt;textarea name=&#34;message&#34;&gt;&lt;/textarea&gt;&lt;br /&gt;
        &lt;input type=&#34;submit&#34;&gt;
    &lt;/form&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://gowebexamples.github.io/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/json/</guid>
      <description>

&lt;h2 id=&#34;json&#34;&gt;JSON&lt;/h2&gt;

&lt;p&gt;This example will show how to deal with JSON data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// json.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;font-weight: bold&#34;&gt;struct&lt;/span&gt; {
	Firstname &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;`json:&amp;quot;firstname&amp;quot;`&lt;/span&gt;
	Lastname  &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;`json:&amp;quot;lastname&amp;quot;`&lt;/span&gt;
	Age       &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color: #bb8844&#34;&gt;`json:&amp;quot;age&amp;quot;`&lt;/span&gt;
}

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/decode&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; user User
		json.NewDecoder(r.Body).Decode(&lt;span style=&#34;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;user)

		fmt.Fprintf(w, &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;%s %s is %d years old!&amp;quot;&lt;/span&gt;, user.Firstname, user.Lastname, user.Age)
	})

	http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/encode&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		peter &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; User{
			Firstname: &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;,
			Lastname:  &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;,
			Age:       &lt;span style=&#34;color: #009999&#34;&gt;25&lt;/span&gt;,
		}

		json.NewEncoder(w).Encode(peter)
	})

	http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run json.go

$ curl -s -XPOST -d&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;#39;{&amp;quot;firstname&amp;quot;:&amp;quot;Donald&amp;quot;,&amp;quot;lastname&amp;quot;:&amp;quot;Trump&amp;quot;,&amp;quot;age&amp;quot;:70}&amp;#39;&lt;/span&gt; http://localhost:8080/decode
Donald Trump is &lt;span style=&#34;color: #009999&#34;&gt;70&lt;/span&gt; years old!

$ curl -s http://localhost:8080/encode
&lt;span style=&#34;font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;firstname&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;lastname&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;:25&lt;span style=&#34;font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Static Files</title>
      <link>https://gowebexamples.github.io/static-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/static-files/</guid>
      <description>

&lt;h2 id=&#34;static-files&#34;&gt;Static Files&lt;/h2&gt;

&lt;p&gt;This example will show how to serve static files like CSSs, JavaScripts or images from a specific directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// static-files.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	fileServer &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; http.FileServer(http.Dir(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;assets/&amp;quot;&lt;/span&gt;))
	http.Handle(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/static/&amp;quot;&lt;/span&gt;, http.StripPrefix(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/static/&amp;quot;&lt;/span&gt;, fileServer))

	http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ tree assets/
assets/
└── css
    └── styles.css
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run static-files.go

$ curl -s http://localhost:8080/static/css/styles.css
body &lt;span style=&#34;font-weight: bold&#34;&gt;{&lt;/span&gt;
    background-color: black;
&lt;span style=&#34;font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Password Hashing</title>
      <link>https://gowebexamples.github.io/password-hashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/password-hashing/</guid>
      <description>

&lt;h2 id=&#34;password-hashing&#34;&gt;Password Hashing&lt;/h2&gt;

&lt;p&gt;This example will show how to hash passwords using bcrypt.
For this we have to &lt;code&gt;go get&lt;/code&gt; the golang bcrypt library like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ go get golang.org/x/crypto/bcrypt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From now on, every application we write will be able to make use of this library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// passwords.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;golang.org/x/crypto/bcrypt&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; HashPassword(password &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;error&lt;/span&gt;) {
    bytes, err &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; bcrypt.GenerateFromPassword([]&lt;span style=&#34;color: #999999&#34;&gt;byte&lt;/span&gt;(password), &lt;span style=&#34;color: #009999&#34;&gt;14&lt;/span&gt;)
    &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #999999&#34;&gt;string&lt;/span&gt;(bytes), err
}

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; CheckPasswordHash(password, hash &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color: #445588; font-weight: bold&#34;&gt;bool&lt;/span&gt; {
    err &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; bcrypt.CompareHashAndPassword([]&lt;span style=&#34;color: #999999&#34;&gt;byte&lt;/span&gt;(hash), []&lt;span style=&#34;color: #999999&#34;&gt;byte&lt;/span&gt;(password))
    &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; err &lt;span style=&#34;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
    password &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;
    hash, _ &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; HashPassword(password) &lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// ignore error for the sake of simplicity&lt;/span&gt;

    fmt.Println(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Password:&amp;quot;&lt;/span&gt;, password)
    fmt.Println(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Hash:    &amp;quot;&lt;/span&gt;, hash)

    match &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; CheckPasswordHash(password, hash)
    fmt.Println(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Match:   &amp;quot;&lt;/span&gt;, match)
}
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ go run passwords.go
Password: secret
Hash:     $2a$14$ajq8Q7fbtFRQvXpdCq7Jcuy.Rx1h/L4J60Otx.gyNLbAYctGMJ9tK
Match:    true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://gowebexamples.github.io/websockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.github.io/websockets/</guid>
      <description>

&lt;h2 id=&#34;websockets&#34;&gt;Websockets&lt;/h2&gt;

&lt;p&gt;This example will show how to work with websockets in Go. We will build a simple server which echoes back everything we send to it.
For this we have to &lt;code&gt;go get&lt;/code&gt; the popular &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/gorilla/websocket&#34;&gt;gorilla/websocket&lt;/a&gt; library like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ go get github.com/gorilla/websocket&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From now on, every application we write will be able to make use of this library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// websockets.go&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;

	&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;github.com/gorilla/websocket&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; upgrader = websocket.Upgrader{
	ReadBufferSize:  &lt;span style=&#34;color: #009999&#34;&gt;1024&lt;/span&gt;,
	WriteBufferSize: &lt;span style=&#34;color: #009999&#34;&gt;1024&lt;/span&gt;,
}

&lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
	http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/echo&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		conn, _ &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; upgrader.Upgrade(w, r, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;) &lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// error ignored for sake of simplicity&lt;/span&gt;

		&lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; {
			&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// Read message from browser&lt;/span&gt;
			msgType, msg, err &lt;span style=&#34;font-weight: bold&#34;&gt;:=&lt;/span&gt; conn.ReadMessage()
			&lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt;
			}

			&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// Print the message to the console&lt;/span&gt;
			fmt.Printf(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;%s sent: %s\n&amp;quot;&lt;/span&gt;, conn.RemoteAddr(), &lt;span style=&#34;color: #999999&#34;&gt;string&lt;/span&gt;(msg))

			&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;// Write message back to browser&lt;/span&gt;
			&lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; err = conn.WriteMessage(msgType, msg); err &lt;span style=&#34;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt;
			}
		}
	})

	http.HandleFunc(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;font-weight: bold&#34;&gt;*&lt;/span&gt;http.Request) {
		http.ServeFile(w, r, &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;websockets.html&amp;quot;&lt;/span&gt;)
	})

	http.ListenAndServe(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;, &lt;span style=&#34;font-weight: bold&#34;&gt;nil&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999988; font-style: italic&#34;&gt;&amp;lt;!-- websockets.html --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;send()&amp;quot;&lt;/span&gt;&amp;gt;Send&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;pre&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;pre&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color: #000080&#34;&gt;script&lt;/span&gt;&amp;gt;
	&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; input &lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #999999&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;);
	&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; output &lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #999999&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;);
	&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; socket &lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; WebSocket(&lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;ws://localhost:8080/echo&amp;quot;&lt;/span&gt;);

	socket.onopen &lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; () {
		output.innerHTML &lt;span style=&#34;font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Status: Connected\n&amp;quot;&lt;/span&gt;;
	};

	socket.onmessage &lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; (e) {
		output.innerHTML &lt;span style=&#34;font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;Server: &amp;quot;&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;+&lt;/span&gt; e.data &lt;span style=&#34;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;;
	};

	&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; send() {
		socket.send(input.value);
		input.value &lt;span style=&#34;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #bb8844&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;
	}
&amp;lt;/&lt;span style=&#34;color: #000080&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ go run websockets.go
[127.0.0.1]:53403 sent: Hello Go Web Examples, you&#39;re doing great!
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo&#34;&gt;
    &lt;input type=&#34;text&#34;&gt;
    &lt;button&gt;Send&lt;/button&gt;
    &lt;pre&gt;Status: Connected
Server: Hello Go Web Examples, you&#39;re doing great!&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>